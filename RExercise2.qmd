---
title: "Untitled"
format: html
---

```{r}
library(readr)
library(sf)
library(dplyr)
library(ggplot2)
```

#Task1. Import data

```{r}
wildschwein_BE <- read_delim("Data/wildschwein_BE_2056.csv", ",")#Load data.


wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)#convert to an sf object, remove=FALSE keeps both coordinate columns (E,N)
wildschwein_BE
```
#Task2: Getting an overview of the data
```{r}

wildschwein_BE <- wildschwein_BE |> # Take wildschwein Data frame
    group_by(TierName)|> # ...group it by TierName
    mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)), units = "secs")#create a new column timelag (mutate) by calculating the time difference between consecutive rows (difftime) in the same individual and coerces the new column as numeric (as.numeric)

wildschwein_BE

```

How many individuals were tracked? Three individuals were tracked

```{r}
unique(wildschwein_BE$TierName)
#[1] "Sabi" "Rosa" "Ruth"
#or
unique(wildschwein_BE$TierID)
#[1] "002A" "016A" "018A"
```

For how long were the individual tracked?

```{r}
wildschwein_BE |>               #1)use this data frame
  group_by(TierName) |>        #2) group by individual
  summarise(
     DateTime_min = min(DatetimeUTC, na.rm = TRUE),
    DateTime_max = max(DatetimeUTC, na.rm = TRUE) #3) Calculate the minimum  
     #4) Calculate the maximum 
    )   
```

TierName DateTime_min        DateTime_max       
  <chr>    <dttm>              <dttm>             
1 Rosa     2014-11-07 07:45:44 2015-06-29 23:45:11
2 Ruth     2014-11-07 18:00:43 2015-07-27 09:45:15
3 Sabi     2014-08-22 21:00:12 2015-07-27 11:00:14

Are there gaps? No gaps 

```{r}
ggplot(wildschwein_BE, aes(DatetimeUTC, TierName))+
  geom_point()
```
What is the temporal sampling interval between the locations?

```{r}
summary(wildschwein_BE$timelag)
hist(log10(wildschwein_BE$timelag/60))# per minute
hist(wildschwein_BE$timelag/60)
```

The sampling interval varied greatly. 

 Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
     12     896     903    1408     916   60367       3

Were all individuals tracked concurrently or sequentially?

```{r}
wildschwein_BE |> 
  filter(DatetimeUTC == 2014-11-07)|> 
  ggplot(aes(DatetimeUTC), colour = TierName)+
  geom_point()

```
#Task3. Deriving movement parameters I: Speed (m/s)
```{r}
#To calculate the distance between two subsequent positions
wildschwein_BE <- wildschwein_BE |>
  group_by(TierName) |> #group by individual
  mutate(steplenght = sqrt ((E-lead(E))^2 + (N-lead(N))^2)) #creates a new column with the calculated distance between two consecutive positions

wildschwein_BE


#To calculate the speed we use the speed formula s= d/t, d = distance traveled, t = time elapsed 
wildschwein_BE <- wildschwein_BE |>
  mutate(speed = steplenght/timelag)

str(wildschwein_BE)
```

#Task 4: Cross-scale movement analysis
```{r}
caro <- read_delim("Data/caro60.csv", ",")#Load data.

caro <- st_as_sf(caro, coords = c("E", "N"), crs = 2056, remove = FALSE)
nrow(caro)
#[1] 200

#reduce the granularity of the sampling interval by selecting every 3rd, 6th and 9th position and save the output to caro_3, caro_6,caro_9 accordingly.

caro_3 <- caro |>
  slice(seq(from = 1, to = n(), by = 3))
caro_3
nrow(caro_3)
#[1] 67

caro_6 <- caro |>
  slice(seq(from = 1, to = n(), by = 6))
caro_6
nrow(caro_6)
#[1] 34

caro_9 <- caro |>
  slice(seq(from = 1, to = n(), by = 9))
caro_9
nrow(caro_9)
#[1] 23

```

To calculate the time-lag, distance and speed at the four different sampling intervals

```{r}
caro <- caro |>
  mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)), units = "secs")|>
  mutate(steplenght = sqrt ((E-lead(E))^2 + (N-lead(N))^2)) |>
  mutate(speed = steplenght/timelag)
  
```

```{r}
caro_3<- caro_3 |>
  mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)), units = "secs")|>
  mutate(steplenght = sqrt ((E-lead(E))^2 + (N-lead(N))^2)) |>
  mutate(speed = steplenght/timelag)
```

```{r}
caro_6 <- caro_6 |>
  mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)), units = "secs")|>
  mutate(steplenght = sqrt ((E-lead(E))^2 + (N-lead(N))^2)) |>
  mutate(speed = steplenght/timelag)
```

```{r}
caro_9 <- caro_9 |>
  mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)), units = "secs")|>
  mutate(steplenght = sqrt ((E-lead(E))^2 + (N-lead(N))^2)) |>
  mutate(speed = steplenght/timelag)
```

compare the speeds visually in a line plot and also visualize the trajectories in a map

```{r}
ggplot(caro, aes(E, N))+
  geom_point(aes(color ="1 min"))+
  geom_path(aes(color="1 min"))+
  geom_point(data= caro_3, aes(color = "3 mins" ))+
  geom_path(data= caro_3, aes(color="3 mins"))+
  labs(title = "Comparing original with 3 mins-resampled data")

ggplot(caro, aes(E, N))+
  geom_point(aes(color ="1 min"))+
  geom_path(aes(color="1 min"))+
  geom_point(data= caro_6, aes(color = "6 mins" ))+
  geom_path(data= caro_6, aes(color="6 mins"))+
  labs(title = "Comparing original with 6 mins-resampled data")

 ggplot(caro, aes(E, N))+
  geom_point(aes(color ="1 min"))+
  geom_path(aes(color="1 min"))+
  geom_point(data= caro_9, aes(color = "9 mins" ))+
  geom_path(data= caro_9, aes(color="9 mins"))+
  labs(title = "Comparing original with 9 mins-resampled data") 
```
